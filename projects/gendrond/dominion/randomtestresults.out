Result for running Random Tests:
randomtestcard1.c:
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room FAILED.
mine FAILED.
remodel FAILED.
smithy FAILED.
village FAILED.
baron FAILED.
great_hall FAILED.
ambassador FAILED.
outposts FAILED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
Testing Smithy Card...
+===================================+
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room PASSED.
mine PASSED.
remodel PASSED.
smithy PASSED.
village PASSED.
baron PASSED.
great_hall PASSED.
ambassador PASSED.
outposts PASSED.
+===================================+

TESTS ON SMITHY CARD COMPLETED.
File 'dominion.c'
Lines executed:31.09% of 685
Branches executed:36.69% of 417
Taken at least once:27.58% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

randomtestcard2.c:
Testing Village Card...0
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...1
+===================================+
TEST FAILED - Card Not Discarded.
TEST Failed - Action Not Properly Added.
Testing Village Card...2
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...3
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...4
+===================================+
TEST FAILED - Card Not Discarded.
TEST Failed - Action Not Properly Added.
Testing Village Card...5
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...6
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...7
+===================================+
TEST FAILED - Card Not Discarded.
TEST Failed - Action Not Properly Added.
Testing Village Card...8
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...9
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...10
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...11
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...12
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...13
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...14
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...15
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...16
+===================================+
TEST FAILED - Card Not Discarded.
TEST Failed - Action Not Properly Added.
Testing Village Card...17
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...18
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...19
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...20
+===================================+
TEST FAILED - Card Not Discarded.
TEST Failed - Action Not Properly Added.
Testing Village Card...21
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...22
+===================================+
TEST FAILED - Card Not Discarded.
TEST Failed - Action Not Properly Added.
Testing Village Card...23
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...24
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...25
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...26
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...27
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...28
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...29
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...30
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...31
+===================================+
TEST FAILED - Card Not Discarded.
TEST Failed - Action Not Properly Added.
Testing Village Card...32
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...33
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...34
+===================================+
TEST FAILED - Card Not Discarded.
TEST Failed - Action Not Properly Added.
Testing Village Card...35
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...36
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...37
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...38
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...39
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...40
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...41
+===================================+
TEST FAILED - Card Not Discarded.
TEST Failed - Action Not Properly Added.
Testing Village Card...42
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...43
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...44
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...45
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...46
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...47
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...48
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...49
+===================================+
TEST FAILED - Card Not Discarded.
TEST Failed - Action Not Properly Added.
Testing Village Card...50
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...51
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...52
+===================================+
TEST FAILED - Card Not Discarded.
TEST Failed - Action Not Properly Added.
Testing Village Card...53
+===================================+
TEST FAILED - Card Not Discarded.
TEST Failed - Action Not Properly Added.
Testing Village Card...54
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...55
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...56
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...57
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...58
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...59
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...60
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...61
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...62
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...63
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...64
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...65
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...66
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...67
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...68
+===================================+
TEST FAILED - Card Not Discarded.
TEST Failed - Action Not Properly Added.
Testing Village Card...69
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...70
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...71
+===================================+
TEST FAILED - Card Not Discarded.
TEST Failed - Action Not Properly Added.
Testing Village Card...72
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...73
+===================================+
TEST FAILED - Card Not Discarded.
TEST Failed - Action Not Properly Added.
Testing Village Card...74
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...75
+===================================+
TEST FAILED - Card Not Discarded.
TEST Failed - Action Not Properly Added.
Testing Village Card...76
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...77
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...78
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...79
+===================================+
TEST FAILED - Card Not Discarded.
TEST Failed - Action Not Properly Added.
Testing Village Card...80
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...81
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...82
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...83
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...84
+===================================+
TEST FAILED - Card Not Discarded.
TEST Failed - Action Not Properly Added.
Testing Village Card...85
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...86
+===================================+
TEST FAILED - Card Not Discarded.
TEST Failed - Action Not Properly Added.
Testing Village Card...87
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...88
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...89
+===================================+
TEST FAILED - Card Not Discarded.
TEST Failed - Action Not Properly Added.
Testing Village Card...90
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...91
+===================================+
TEST FAILED - Card Not Discarded.
TEST Failed - Action Not Properly Added.
Testing Village Card...92
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...93
+===================================+
TEST FAILED - Card Not Discarded.
TEST Failed - Action Not Properly Added.
Testing Village Card...94
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...95
+===================================+
TEST FAILED - Card Not Discarded.
TEST Failed - Action Not Properly Added.
Testing Village Card...96
+===================================+
TEST FAILED - Card Not Discarded.
TEST Failed - Action Not Properly Added.
Testing Village Card...97
+===================================+
TEST FAILED - Card Not Discarded.
TEST Failed - Action Not Properly Added.
Testing Village Card...98
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
Testing Village Card...99
+===================================+
TEST FAILED - Card Not Discarded.
TEST Failed - Action Not Properly Added.
+===================================+

TESTS ON VILLAGE CARD COMPLETED.
File 'dominion.c'
Lines executed:31.09% of 685
Branches executed:36.69% of 417
Taken at least once:27.58% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

randomtestadventurer.c:
Testing Adventurer Card...0
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...1
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...2
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...3
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...4
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...5
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...6
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...7
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...8
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...9
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...10
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...11
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...12
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...13
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...14
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...15
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...16
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...17
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...18
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...19
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...20
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...21
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...22
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...23
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...24
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...25
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...26
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...27
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...28
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...29
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...30
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...31
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...32
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...33
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...34
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...35
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...36
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...37
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...38
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...39
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...40
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...41
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...42
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...43
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...44
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...45
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...46
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...47
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...48
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...49
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...50
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...51
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...52
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...53
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...54
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...55
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...56
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...57
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...58
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...59
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...60
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...61
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...62
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...63
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...64
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...65
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...66
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...67
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...68
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...69
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...70
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...71
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...72
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...73
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...74
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...75
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...76
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...77
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...78
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...79
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...80
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...81
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...82
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...83
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...84
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...85
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...86
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...87
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...88
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...89
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...90
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...91
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...92
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...93
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...94
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...95
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...96
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...97
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...98
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
Testing Adventurer Card...99
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Proper Hand.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
+=============================================+

TESTS ON ADVENTURER CARD COMPLETED.
File 'dominion.c'
Lines executed:31.09% of 685
Branches executed:36.69% of 417
Taken at least once:27.58% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:183
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 2324 returned 100% blocks executed 85%
        -:    8:int compare(const void *a, const void *b)
        -:    9:{
     2324:   10:  if (*(int *)a > *(int *)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   11:    return 1;
     2324:   12:  if (*(int *)a < *(int *)b)
branch  0 taken 36%
branch  1 taken 64%
      830:   13:    return -1;
     1494:   14:  return 0;
     2324:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
        -:   17:struct gameState *newGame()
        -:   18:{
    #####:   19:  struct gameState *g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
    #####:   26:  int *k = malloc(10 * sizeof(int));
    #####:   27:  k[0] = k1;
    #####:   28:  k[1] = k2;
    #####:   29:  k[2] = k3;
    #####:   30:  k[3] = k4;
    #####:   31:  k[4] = k5;
    #####:   32:  k[5] = k6;
    #####:   33:  k[6] = k7;
    #####:   34:  k[7] = k8;
    #####:   35:  k[8] = k9;
    #####:   36:  k[9] = k10;
    #####:   37:  return k;
        -:   38:}
        -:   39:
function initializeGame called 83 returned 100% blocks executed 87%
        -:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;
        -:   47:  //set up random number generator
       83:   48:  SelectStream(1);
       83:   49:  PutSeed((long)randomSeed);
        -:   50:
        -:   51:  //check number of players
      166:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   53:  {
    #####:   54:    return -1;
        -:   55:  }
        -:   56:
        -:   57:  //set number of players
       83:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
     1826:   61:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   62:  {
    18260:   63:    for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   64:    {
    15770:   65:      if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   66:      {
    #####:   67:        return -1;
        -:   68:      }
     8300:   69:    }
      830:   70:  }
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
       83:   76:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   77:  {
       83:   78:    state->supplyCount[curse] = 10;
       83:   79:  }
    #####:   80:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   81:  {
    #####:   82:    state->supplyCount[curse] = 20;
    #####:   83:  }
        -:   84:  else
        -:   85:  {
    #####:   86:    state->supplyCount[curse] = 30;
        -:   87:  }
        -:   88:
        -:   89:  //set number of Victory cards
       83:   90:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   91:  {
       83:   92:    state->supplyCount[estate] = 8;
       83:   93:    state->supplyCount[duchy] = 8;
       83:   94:    state->supplyCount[province] = 8;
       83:   95:  }
        -:   96:  else
        -:   97:  {
    #####:   98:    state->supplyCount[estate] = 12;
    #####:   99:    state->supplyCount[duchy] = 12;
    #####:  100:    state->supplyCount[province] = 12;
        -:  101:  }
        -:  102:
        -:  103:  //set number of Treasure cards
       83:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       83:  105:  state->supplyCount[silver] = 40;
       83:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
     3486:  109:  for (i = adventurer; i <= treasure_map; i++) //loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  110:  {
    27390:  111:    for (j = 0; j < 10; j++) //loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  112:    {
    12865:  113:      if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  114:      {
        -:  115:        //check if card is a 'Victory' Kingdom card
     1577:  116:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 4%
branch  3 taken 96%
        -:  117:        {
      114:  118:          if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:  119:          {
      114:  120:            state->supplyCount[i] = 8;
      114:  121:          }
        -:  122:          else
        -:  123:          {
    #####:  124:            state->supplyCount[i] = 12;
        -:  125:          }
      114:  126:        }
        -:  127:        else
        -:  128:        {
      716:  129:          state->supplyCount[i] = 10;
        -:  130:        }
      830:  131:        break;
        -:  132:      }
        -:  133:      else //card is not in the set choosen for the game
        -:  134:      {
    12035:  135:        state->supplyCount[i] = -1;
        -:  136:      }
    12035:  137:    }
     1660:  138:  }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
      498:  144:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  145:  {
      166:  146:    state->deckCount[i] = 0;
     1328:  147:    for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  148:    {
      498:  149:      state->deck[i][j] = estate;
      498:  150:      state->deckCount[i]++;
      498:  151:    }
     2656:  152:    for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  153:    {
     1162:  154:      state->deck[i][j] = copper;
     1162:  155:      state->deckCount[i]++;
     1162:  156:    }
      166:  157:  }
        -:  158:
        -:  159:  //shuffle player decks
      498:  160:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  161:  {
      166:  162:    if (shuffle(i, state) < 0)
branch  0 taken 0%
branch  1 taken 100%
        -:  163:    {
    #####:  164:      return -1;
        -:  165:    }
      166:  166:  }
        -:  167:
        -:  168:  //draw player hands
      498:  169:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  170:  {
        -:  171:    //initialize hand size to zero
      166:  172:    state->handCount[i] = 0;
      166:  173:    state->discardCount[i] = 0;
        -:  174:    //draw 5 cards
        -:  175:    // for (j = 0; j < 5; j++)
        -:  176:    //	{
        -:  177:    //	  drawCard(i, state);
        -:  178:    //	}
      166:  179:  }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
     4648:  182:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  183:  {
     2241:  184:    state->embargoTokens[i] = 0;
     2241:  185:  }
        -:  186:
        -:  187:  //initialize first player's turn
       83:  188:  state->outpostPlayed = 0;
       83:  189:  state->phase = 0;
       83:  190:  state->numActions = 1;
       83:  191:  state->numBuys = 1;
       83:  192:  state->playedCardCount = 0;
       83:  193:  state->whoseTurn = 0;
       83:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
      996:  198:  for (it = 0; it < 5; it++)
branch  0 taken 83%
branch  1 taken 17%
        -:  199:  {
      415:  200:    drawCard(state->whoseTurn, state);
      415:  201:  }
        -:  202:
       83:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
       83:  205:  return 0;
       83:  206:}
        -:  207:
function shuffle called 918 returned 100% blocks executed 100%
        -:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
      918:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
      918:  216:  if (state->deckCount[player] < 1)
branch  0 taken 82%
branch  1 taken 18%
      752:  217:    return -1;
      166:  218:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
     3652:  221:  while (state->deckCount[player] > 0)
branch  0 taken 91%
branch  1 taken 9%
        -:  222:  {
     1660:  223:    card = floor(Random() * state->deckCount[player]);
     1660:  224:    newDeck[newDeckPos] = state->deck[player][card];
     1660:  225:    newDeckPos++;
    11620:  226:    for (i = card; i < state->deckCount[player] - 1; i++)
branch  0 taken 71%
branch  1 taken 29%
        -:  227:    {
     4150:  228:      state->deck[player][i] = state->deck[player][i + 1];
     4150:  229:    }
     1660:  230:    state->deckCount[player]--;
        -:  231:  }
     3652:  232:  for (i = 0; i < newDeckPos; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:  233:  {
     1660:  234:    state->deck[player][i] = newDeck[i];
     1660:  235:    state->deckCount[player]++;
     1660:  236:  }
        -:  237:
      166:  238:  return 0;
      918:  239:}
        -:  240:
function playCard called 0 returned 0% blocks executed 0%
        -:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
    #####:  244:  int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    #####:  247:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  248:  {
    #####:  249:    return -1;
        -:  250:  }
        -:  251:
        -:  252:  //check if player has enough actions
    #####:  253:  if (state->numActions < 1)
branch  0 never executed
branch  1 never executed
        -:  254:  {
    #####:  255:    return -1;
        -:  256:  }
        -:  257:
        -:  258:  //get card played
    #####:  259:  card = handCard(handPos, state);
        -:  260:
        -:  261:  //check if selected card is an action
    #####:  262:  if (card < adventurer || card > treasure_map)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  263:  {
    #####:  264:    return -1;
        -:  265:  }
        -:  266:
        -:  267:  //play card
    #####:  268:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
branch  0 never executed
branch  1 never executed
        -:  269:  {
    #####:  270:    return -1;
        -:  271:  }
        -:  272:
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  278:
    #####:  279:  return 0;
    #####:  280:}
        -:  281:
function buyCard called 27200 returned 100% blocks executed 50%
        -:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:  int who;
        -:  285:  if (DEBUG)
        -:  286:  {
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
    27200:  292:  who = state->whoseTurn;
        -:  293:
    27200:  294:  if (state->numBuys < 1)
branch  0 taken 25%
branch  1 taken 75%
        -:  295:  {
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
     6800:  298:    return -1;
        -:  299:  }
    20400:  300:  else if (supplyCount(supplyPos, state) < 1)
branch  0 taken 100%
branch  1 taken 0%
        -:  301:  {
        -:  302:    if (DEBUG)
        -:  303:      printf("There are not any of that type of card left\n");
    20400:  304:    return -1;
        -:  305:  }
    #####:  306:  else if (state->coins < getCost(supplyPos))
branch  0 never executed
branch  1 never executed
        -:  307:  {
        -:  308:    if (DEBUG)
        -:  309:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:    return -1;
        -:  311:  }
        -:  312:  else
        -:  313:  {
    #####:  314:    state->phase = 1;
        -:  315:    //state->supplyCount[supplyPos]--;
    #####:  316:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  317:
    #####:  318:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  319:    state->numBuys--;
        -:  320:    if (DEBUG)
        -:  321:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:  }
        -:  323:
        -:  324:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:  //state->discardCount[who]++;
        -:  326:
    #####:  327:  return 0;
    27200:  328:}
        -:  329:
function numHandCards called 2 returned 100% blocks executed 100%
        -:  330:int numHandCards(struct gameState *state)
        -:  331:{
        2:  332:  return state->handCount[whoseTurn(state)];
        -:  333:}
        -:  334:
function handCard called 0 returned 0% blocks executed 0%
        -:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
    #####:  337:  int currentPlayer = whoseTurn(state);
    #####:  338:  return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
function supplyCount called 20400 returned 100% blocks executed 100%
        -:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
    20400:  343:  return state->supplyCount[card];
        -:  344:}
        -:  345:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:  int i;
    #####:  349:  int count = 0;
        -:  350:
    #####:  351:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  352:  {
    #####:  353:    if (state->deck[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  354:      count++;
    #####:  355:  }
        -:  356:
    #####:  357:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  358:  {
    #####:  359:    if (state->hand[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  360:      count++;
    #####:  361:  }
        -:  362:
    #####:  363:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  364:  {
    #####:  365:    if (state->discard[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  366:      count++;
    #####:  367:  }
        -:  368:
    #####:  369:  return count;
        -:  370:}
        -:  371:
function whoseTurn called 493 returned 100% blocks executed 100%
        -:  372:int whoseTurn(struct gameState *state)
        -:  373:{
      493:  374:  return state->whoseTurn;
        -:  375:}
        -:  376:
function endTurn called 0 returned 0% blocks executed 0%
        -:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:  int k;
        -:  380:  int i;
    #####:  381:  int currentPlayer = whoseTurn(state);
        -:  382:
        -:  383:  //Discard hand
    #####:  384:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  385:  {
    #####:  386:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
    #####:  387:    state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
    #####:  388:  }
    #####:  389:  state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:  //Code for determining the player
    #####:  392:  if (currentPlayer < (state->numPlayers - 1))
branch  0 never executed
branch  1 never executed
        -:  393:  {
    #####:  394:    state->whoseTurn = currentPlayer + 1; //Still safe to increment
    #####:  395:  }
        -:  396:  else
        -:  397:  {
    #####:  398:    state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:  }
        -:  400:
    #####:  401:  state->outpostPlayed = 0;
    #####:  402:  state->phase = 0;
    #####:  403:  state->numActions = 1;
    #####:  404:  state->coins = 0;
    #####:  405:  state->numBuys = 1;
    #####:  406:  state->playedCardCount = 0;
    #####:  407:  state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:  //int k; move to top
        -:  410:  //Next player draws hand
    #####:  411:  for (k = 0; k < 5; k++)
branch  0 never executed
branch  1 never executed
        -:  412:  {
    #####:  413:    drawCard(state->whoseTurn, state); //Draw a card
    #####:  414:  }
        -:  415:
        -:  416:  //Update money
    #####:  417:  updateCoins(state->whoseTurn, state, 0);
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
function isGameOver called 165 returned 100% blocks executed 84%
        -:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:  int i;
        -:  425:  int j;
        -:  426:
        -:  427:  //if stack of Province cards is empty, the game ends
      165:  428:  if (state->supplyCount[province] == 0)
branch  0 taken 60%
branch  1 taken 40%
        -:  429:  {
       99:  430:    return 1;
        -:  431:  }
        -:  432:
        -:  433:  //if three supply pile are at 0, the game ends
       66:  434:  j = 0;
     3432:  435:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  436:  {
     1650:  437:    if (state->supplyCount[i] == 0)
branch  0 taken 0%
branch  1 taken 100%
        -:  438:    {
    #####:  439:      j++;
    #####:  440:    }
     1650:  441:  }
       66:  442:  if (j >= 3)
branch  0 taken 0%
branch  1 taken 100%
        -:  443:  {
    #####:  444:    return 1;
        -:  445:  }
        -:  446:
       66:  447:  return 0;
      165:  448:}
        -:  449:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:  int i;
    #####:  454:  int score = 0;
        -:  455:  //score from hand
    #####:  456:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  457:  {
    #####:  458:    if (state->hand[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  459:    {
    #####:  460:      score = score - 1;
    #####:  461:    };
    #####:  462:    if (state->hand[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  463:    {
    #####:  464:      score = score + 1;
    #####:  465:    };
    #####:  466:    if (state->hand[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  467:    {
    #####:  468:      score = score + 3;
    #####:  469:    };
    #####:  470:    if (state->hand[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  471:    {
    #####:  472:      score = score + 6;
    #####:  473:    };
    #####:  474:    if (state->hand[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  475:    {
    #####:  476:      score = score + 1;
    #####:  477:    };
    #####:  478:    if (state->hand[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  479:    {
    #####:  480:      score = score + (fullDeckCount(player, 0, state) / 10);
    #####:  481:    };
    #####:  482:  }
        -:  483:
        -:  484:  //score from discard
    #####:  485:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  486:  {
    #####:  487:    if (state->discard[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  488:    {
    #####:  489:      score = score - 1;
    #####:  490:    };
    #####:  491:    if (state->discard[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  492:    {
    #####:  493:      score = score + 1;
    #####:  494:    };
    #####:  495:    if (state->discard[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  496:    {
    #####:  497:      score = score + 3;
    #####:  498:    };
    #####:  499:    if (state->discard[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  500:    {
    #####:  501:      score = score + 6;
    #####:  502:    };
    #####:  503:    if (state->discard[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  504:    {
    #####:  505:      score = score + 1;
    #####:  506:    };
    #####:  507:    if (state->discard[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  508:    {
    #####:  509:      score = score + (fullDeckCount(player, 0, state) / 10);
    #####:  510:    };
    #####:  511:  }
        -:  512:
        -:  513:  //score from deck
    #####:  514:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  515:  {
    #####:  516:    if (state->deck[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  517:    {
    #####:  518:      score = score - 1;
    #####:  519:    };
    #####:  520:    if (state->deck[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  521:    {
    #####:  522:      score = score + 1;
    #####:  523:    };
    #####:  524:    if (state->deck[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  525:    {
    #####:  526:      score = score + 3;
    #####:  527:    };
    #####:  528:    if (state->deck[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  529:    {
    #####:  530:      score = score + 6;
    #####:  531:    };
    #####:  532:    if (state->deck[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  533:    {
    #####:  534:      score = score + 1;
    #####:  535:    };
    #####:  536:    if (state->deck[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  537:    {
    #####:  538:      score = score + (fullDeckCount(player, 0, state) / 10);
    #####:  539:    };
    #####:  540:  }
        -:  541:
    #####:  542:  return score;
        -:  543:}
        -:  544:
function getWinners called 0 returned 0% blocks executed 0%
        -:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:  int i;
        -:  548:  int j;
        -:  549:  int highScore;
        -:  550:  int currentPlayer;
        -:  551:
        -:  552:  //get score for each player
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  554:  {
        -:  555:    //set unused player scores to -9999
    #####:  556:    if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  557:    {
    #####:  558:      players[i] = -9999;
    #####:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:      players[i] = scoreFor(i, state);
        -:  563:    }
    #####:  564:  }
        -:  565:
        -:  566:  //find highest score
    #####:  567:  j = 0;
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  569:  {
    #####:  570:    if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  571:    {
    #####:  572:      j = i;
    #####:  573:    }
    #####:  574:  }
    #####:  575:  highScore = players[j];
        -:  576:
        -:  577:  //add 1 to players who had less turns
    #####:  578:  currentPlayer = whoseTurn(state);
    #####:  579:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  580:  {
    #####:  581:    if (players[i] == highScore && i > currentPlayer)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  582:    {
    #####:  583:      players[i]++;
    #####:  584:    }
    #####:  585:  }
        -:  586:
        -:  587:  //find new highest score
    #####:  588:  j = 0;
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  590:  {
    #####:  591:    if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  592:    {
    #####:  593:      j = i;
    #####:  594:    }
    #####:  595:  }
    #####:  596:  highScore = players[j];
        -:  597:
        -:  598:  //set winners in array to 1 and rest to 0
    #####:  599:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  600:  {
    #####:  601:    if (players[i] == highScore)
branch  0 never executed
branch  1 never executed
        -:  602:    {
    #####:  603:      players[i] = 1;
    #####:  604:    }
        -:  605:    else
        -:  606:    {
    #####:  607:      players[i] = 0;
        -:  608:    }
    #####:  609:  }
        -:  610:
    #####:  611:  return 0;
        -:  612:}
        -:  613:
function drawCard called 1472 returned 100% blocks executed 75%
        -:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:  int count;
        -:  617:  int deckCounter;
     1472:  618:  if (state->deckCount[player] <= 0)
branch  0 taken 31%
branch  1 taken 69%
        -:  619:  { //Deck is empty
        -:  620:
        -:  621:    //Step 1 Shuffle the discard pile back into a deck
        -:  622:    int i;
        -:  623:    //Move discard to deck
      922:  624:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100%
        -:  625:    {
    #####:  626:      state->deck[player][i] = state->discard[player][i];
    #####:  627:      state->discard[player][i] = -1;
    #####:  628:    }
        -:  629:
      461:  630:    state->deckCount[player] = state->discardCount[player];
      461:  631:    state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:    //Shufffle the deck
      461:  634:    shuffle(player, state); //Shuffle the deck up and make it so that we can draw
        -:  635:
        -:  636:    if (DEBUG)
        -:  637:    { //Debug statements
        -:  638:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:    }
        -:  640:
      461:  641:    state->discardCount[player] = 0;
        -:  642:
        -:  643:    //Step 2 Draw Card
      461:  644:    count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:    if (DEBUG)
        -:  647:    { //Debug statements
        -:  648:      printf("Current hand count: %d\n", count);
        -:  649:    }
        -:  650:
      461:  651:    deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
      461:  653:    if (deckCounter == 0)
branch  0 taken 100%
branch  1 taken 0%
      461:  654:      return -1;
        -:  655:
    #####:  656:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
    #####:  657:    state->deckCount[player]--;
    #####:  658:    state->handCount[player]++; //Increment hand count
    #####:  659:  }
        -:  660:
        -:  661:  else
        -:  662:  {
     1011:  663:    int count = state->handCount[player]; //Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG)
        -:  666:    { //Debug statements
        -:  667:      printf("Current hand count: %d\n", count);
        -:  668:    }
        -:  669:
     1011:  670:    deckCounter = state->deckCount[player];                            //Create holder for the deck count
     1011:  671:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
     1011:  672:    state->deckCount[player]--;
     1011:  673:    state->handCount[player]++; //Increment hand count
        -:  674:  }
        -:  675:
     1011:  676:  return 0;
     1472:  677:}
        -:  678:
function getCost called 1782 returned 100% blocks executed 96%
        -:  679:int getCost(int cardNumber)
        -:  680:{
     1782:  681:  switch (cardNumber)
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 0%
        -:  682:  {
        -:  683:  case curse:
       66:  684:    return 0;
        -:  685:  case estate:
       66:  686:    return 2;
        -:  687:  case duchy:
       66:  688:    return 5;
        -:  689:  case province:
       66:  690:    return 8;
        -:  691:  case copper:
       66:  692:    return 0;
        -:  693:  case silver:
       66:  694:    return 3;
        -:  695:  case gold:
       66:  696:    return 6;
        -:  697:  case adventurer:
       66:  698:    return 6;
        -:  699:  case council_room:
       66:  700:    return 5;
        -:  701:  case feast:
       66:  702:    return 4;
        -:  703:  case gardens:
       66:  704:    return 4;
        -:  705:  case mine:
       66:  706:    return 5;
        -:  707:  case remodel:
       66:  708:    return 4;
        -:  709:  case smithy:
       66:  710:    return 4;
        -:  711:  case village:
       66:  712:    return 3;
        -:  713:  case baron:
       66:  714:    return 4;
        -:  715:  case great_hall:
       66:  716:    return 3;
        -:  717:  case minion:
       66:  718:    return 5;
        -:  719:  case steward:
       66:  720:    return 3;
        -:  721:  case tribute:
       66:  722:    return 5;
        -:  723:  case ambassador:
       66:  724:    return 3;
        -:  725:  case cutpurse:
       66:  726:    return 4;
        -:  727:  case embargo:
       66:  728:    return 2;
        -:  729:  case outpost:
       66:  730:    return 5;
        -:  731:  case salvager:
       66:  732:    return 4;
        -:  733:  case sea_hag:
       66:  734:    return 4;
        -:  735:  case treasure_map:
       66:  736:    return 4;
        -:  737:  }
        -:  738:
    #####:  739:  return -1;
     1782:  740:}
        -:  741:
        -:  742:/* Rewritten Functions */
        -:  743:
        -:  744:// Adventurer - mistakes must be added
function adventurerCard called 1 returned 100% blocks executed 100%
        -:  745:int adventurerCard(int drawntreasure, int currentPlayer, struct gameState *state, int cardDrawn, int temphand[], int z)
        -:  746:{
      594:  747:  while (drawntreasure < 2)
branch  0 taken 99%
branch  1 taken 1%
        -:  748:  {
      296:  749:    if (state->deckCount[currentPlayer] < 1)
branch  0 taken 98%
branch  1 taken 2%
        -:  750:    { //if the deck is empty we need to shuffle discard and add to deck
      291:  751:      shuffle(currentPlayer, state);
      291:  752:    }
      296:  753:    drawCard(currentPlayer, state);
      296:  754:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
        -:  755:    //if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) //correct
        -:  756:    //****************************************************************************
      601:  757:    if (cardDrawn == copper && cardDrawn == silver || cardDrawn == gold) //bug
branch  0 taken 3%
branch  1 taken 97%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 1%
branch  5 taken 99%
        -:  758:                                                                         //****************************************************************************
        2:  759:      drawntreasure++;
        -:  760:    else
        -:  761:    {
      294:  762:      temphand[z] = cardDrawn;
      294:  763:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      294:  764:      z++;
        -:  765:    }
        -:  766:  }
      590:  767:  while (z - 1 >= 0)
branch  0 taken 99%
branch  1 taken 1%
        -:  768:  {
      294:  769:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
      294:  770:    z = z - 1;
        -:  771:  }
        1:  772:  return 0;
        -:  773:}
        -:  774:
        -:  775:// Smithy - mistakes must be added
function smithyCard called 113 returned 100% blocks executed 100%
        -:  776:int smithyCard(int i, int currentPlayer, struct gameState *state, int handPos)
        -:  777:{
        -:  778:  //+3 Cards
        -:  779:  //****************************************************************************
        -:  780:  //for (i = 0; i < 3; i++) // correct
     1130:  781:  for (i = 0; i <= 3; i++) // bug
branch  0 taken 80%
branch  1 taken 20%
        -:  782:  //****************************************************************************
        -:  783:  {
      452:  784:    drawCard(currentPlayer, state);
      452:  785:  }
        -:  786:
        -:  787:  //discard card from hand
      113:  788:  discardCard(handPos, currentPlayer, state, 0);
      113:  789:  return 0;
        -:  790:}
        -:  791:
        -:  792:// Minion - no mistakes added
function minionCard called 0 returned 0% blocks executed 0%
        -:  793:int minionCard(int i, int j, int handPos, struct gameState *state, int currentPlayer, int choice1, int choice2)
        -:  794:{
        -:  795:  //+1 action
    #####:  796:  state->numActions++;
        -:  797:
        -:  798:  //discard card from hand
    #####:  799:  discardCard(handPos, currentPlayer, state, 0);
        -:  800:
    #####:  801:  if (choice1) //+2 coins
branch  0 never executed
branch  1 never executed
        -:  802:  {
    #####:  803:    state->coins = state->coins + 2;
    #####:  804:  }
        -:  805:
    #####:  806:  else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  807:  {
        -:  808:    //discard hand
    #####:  809:    while (numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  810:    {
    #####:  811:      discardCard(handPos, currentPlayer, state, 0);
        -:  812:    }
        -:  813:
        -:  814:    //draw 4
    #####:  815:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  816:    {
    #####:  817:      drawCard(currentPlayer, state);
    #####:  818:    }
        -:  819:
        -:  820:    //other players discard hand and redraw if hand size > 4
    #####:  821:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  822:    {
    #####:  823:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  824:      {
    #####:  825:        if (state->handCount[i] > 4)
branch  0 never executed
branch  1 never executed
        -:  826:        {
        -:  827:          //discard hand
    #####:  828:          while (state->handCount[i] > 0)
branch  0 never executed
branch  1 never executed
        -:  829:          {
    #####:  830:            discardCard(handPos, i, state, 0);
        -:  831:          }
        -:  832:
        -:  833:          //draw 4
    #####:  834:          for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  835:          {
    #####:  836:            drawCard(i, state);
    #####:  837:          }
    #####:  838:        }
    #####:  839:      }
    #####:  840:    }
    #####:  841:  }
    #####:  842:  return 0;
        -:  843:}
        -:  844:
        -:  845:// Ambassador - mistake added
function ambassadorCard called 0 returned 0% blocks executed 0%
        -:  846:int ambassadorCard(int i, int j, int choice1, int choice2, int handPos, struct gameState *state, int currentPlayer)
        -:  847:{
    #####:  848:  j = 0; //used to check if player has enough cards to discard
        -:  849:
    #####:  850:  if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  851:  {
    #####:  852:    return -1;
        -:  853:  }
        -:  854:
        -:  855:  //****************************************************************************
        -:  856:  //if (choice1 == handPos) //correct
    #####:  857:  if (choice1 != handPos) // bug
branch  0 never executed
branch  1 never executed
        -:  858:  //****************************************************************************
        -:  859:  {
    #####:  860:    return -1;
        -:  861:  }
        -:  862:
    #####:  863:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  864:  {
    #####:  865:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  866:    {
    #####:  867:      j++;
    #####:  868:    }
    #####:  869:  }
    #####:  870:  if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  871:  {
    #####:  872:    return -1;
        -:  873:  }
        -:  874:
        -:  875:  if (DEBUG)
        -:  876:    printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  877:
        -:  878:  //increase supply count for choosen card by amount being discarded
    #####:  879:  state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  880:
        -:  881:  //each other player gains a copy of revealed card
    #####:  882:  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  883:  {
    #####:  884:    if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  885:    {
    #####:  886:      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  887:    }
    #####:  888:  }
        -:  889:
        -:  890:  //discard played card from hand
    #####:  891:  discardCard(handPos, currentPlayer, state, 0);
        -:  892:
        -:  893:  //trash copies of cards returned to supply
    #####:  894:  for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  895:  {
    #####:  896:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  897:    {
    #####:  898:      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  899:      {
    #####:  900:        discardCard(i, currentPlayer, state, 1);
    #####:  901:        break;
        -:  902:      }
    #####:  903:    }
    #####:  904:  }
        -:  905:
    #####:  906:  return 0;
    #####:  907:}
        -:  908:
        -:  909:// Outpost card - mistake added to outpostPlayed from ++ to --
function outpostCard called 8 returned 100% blocks executed 100%
        -:  910:int outpostCard(int handPos, int currentPlayer, struct gameState *state)
        -:  911:{
        -:  912:  //set outpost flag
        -:  913:  //state->outpostPlayed++; //correct
        -:  914:  //****************************************************************************
        8:  915:  state->outpostPlayed--; // bug
        -:  916:  //****************************************************************************
        -:  917:
        -:  918:  //discard card
        8:  919:  discardCard(handPos, currentPlayer, state, 0);
        8:  920:  return 0;
        -:  921:}
        -:  922:
function cardEffect called 431 returned 100% blocks executed 4%
        -:  923:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  924:{
        -:  925:  int i;
        -:  926:  int j;
        -:  927:  int k;
        -:  928:  int x;
        -:  929:  int index;
      431:  930:  int currentPlayer = whoseTurn(state);
      431:  931:  int nextPlayer = currentPlayer + 1;
        -:  932:
      431:  933:  int tributeRevealedCards[2] = {-1, -1};
        -:  934:  int temphand[MAX_HAND]; // moved above the if statement
      431:  935:  int drawntreasure = 0;
        -:  936:  int cardDrawn;
      431:  937:  int z = 0; // this is the counter for the temp hand
      431:  938:  if (nextPlayer > (state->numPlayers - 1))
branch  0 taken 0%
branch  1 taken 100%
        -:  939:  {
    #####:  940:    nextPlayer = 0;
    #####:  941:  }
        -:  942:
        -:  943:  //uses switch to select card and perform actions
      431:  944:  switch (card)
branch  0 taken 1%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 26%
branch  7 taken 72%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 2%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  945:  {
        -:  946:  case adventurer:
        1:  947:    return adventurerCard(drawntreasure, currentPlayer, state, cardDrawn, temphand, z);
        -:  948:    /*while (drawntreasure < 2)
        -:  949:    {
        -:  950:      if (state->deckCount[currentPlayer] < 1)
        -:  951:      { //if the deck is empty we need to shuffle discard and add to deck
        -:  952:        shuffle(currentPlayer, state);
        -:  953:      }
        -:  954:      drawCard(currentPlayer, state);
        -:  955:      cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
        -:  956:      if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  957:        drawntreasure++;
        -:  958:      else
        -:  959:      {
        -:  960:        temphand[z] = cardDrawn;
        -:  961:        state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  962:        z++;
        -:  963:      }
        -:  964:    }
        -:  965:    while (z - 1 >= 0)
        -:  966:    {
        -:  967:      state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
        -:  968:      z = z - 1;
        -:  969:    }
        -:  970:    return 0;*/
        -:  971:
        -:  972:  case council_room:
        -:  973:    //+4 Cards
    #####:  974:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  975:    {
    #####:  976:      drawCard(currentPlayer, state);
    #####:  977:    }
        -:  978:
        -:  979:    //+1 Buy
    #####:  980:    state->numBuys++;
        -:  981:
        -:  982:    //Each other player draws a card
    #####:  983:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  984:    {
    #####:  985:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  986:      {
    #####:  987:        drawCard(i, state);
    #####:  988:      }
    #####:  989:    }
        -:  990:
        -:  991:    //put played card in played card pile
    #####:  992:    discardCard(handPos, currentPlayer, state, 0);
        -:  993:
    #####:  994:    return 0;
        -:  995:
        -:  996:  case feast:
        -:  997:    //gain card with cost up to 5
        -:  998:    //Backup hand
    #####:  999:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1000:    {
    #####: 1001:      temphand[i] = state->hand[currentPlayer][i]; //Backup card
    #####: 1002:      state->hand[currentPlayer][i] = -1;          //Set to nothing
    #####: 1003:    }
        -: 1004:    //Backup hand
        -: 1005:
        -: 1006:    //Update Coins for Buy
    #####: 1007:    updateCoins(currentPlayer, state, 5);
    #####: 1008:    x = 1; //Condition to loop on
    #####: 1009:    while (x == 1)
branch  0 never executed
branch  1 never executed
        -: 1010:    { //Buy one card
    #####: 1011:      if (supplyCount(choice1, state) <= 0)
branch  0 never executed
branch  1 never executed
        -: 1012:      {
        -: 1013:        if (DEBUG)
        -: 1014:          printf("None of that card left, sorry!\n");
        -: 1015:
        -: 1016:        if (DEBUG)
        -: 1017:        {
        -: 1018:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1019:        }
    #####: 1020:      }
    #####: 1021:      else if (state->coins < getCost(choice1))
branch  0 never executed
branch  1 never executed
        -: 1022:      {
    #####: 1023:        printf("That card is too expensive!\n");
        -: 1024:
        -: 1025:        if (DEBUG)
        -: 1026:        {
        -: 1027:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1028:        }
    #####: 1029:      }
        -: 1030:      else
        -: 1031:      {
        -: 1032:
        -: 1033:        if (DEBUG)
        -: 1034:        {
        -: 1035:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1036:        }
        -: 1037:
    #####: 1038:        gainCard(choice1, state, 0, currentPlayer); //Gain the card
    #####: 1039:        x = 0;                                      //No more buying cards
        -: 1040:
        -: 1041:        if (DEBUG)
        -: 1042:        {
        -: 1043:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1044:        }
        -: 1045:      }
        -: 1046:    }
        -: 1047:
        -: 1048:    //Reset Hand
    #####: 1049:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1050:    {
    #####: 1051:      state->hand[currentPlayer][i] = temphand[i];
    #####: 1052:      temphand[i] = -1;
    #####: 1053:    }
        -: 1054:    //Reset Hand
        -: 1055:
    #####: 1056:    return 0;
        -: 1057:
        -: 1058:  case gardens:
    #####: 1059:    return -1;
        -: 1060:
        -: 1061:  case mine:
    #####: 1062:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -: 1063:
    #####: 1064:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1065:    {
    #####: 1066:      return -1;
        -: 1067:    }
        -: 1068:
    #####: 1069:    if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1070:    {
    #####: 1071:      return -1;
        -: 1072:    }
        -: 1073:
    #####: 1074:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
branch  0 never executed
branch  1 never executed
        -: 1075:    {
    #####: 1076:      return -1;
        -: 1077:    }
        -: 1078:
    #####: 1079:    gainCard(choice2, state, 2, currentPlayer);
        -: 1080:
        -: 1081:    //discard card from hand
    #####: 1082:    discardCard(handPos, currentPlayer, state, 0);
        -: 1083:
        -: 1084:    //discard trashed card
    #####: 1085:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1086:    {
    #####: 1087:      if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1088:      {
    #####: 1089:        discardCard(i, currentPlayer, state, 0);
    #####: 1090:        break;
        -: 1091:      }
    #####: 1092:    }
        -: 1093:
    #####: 1094:    return 0;
        -: 1095:
        -: 1096:  case remodel:
    #####: 1097:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -: 1098:
    #####: 1099:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
branch  0 never executed
branch  1 never executed
        -: 1100:    {
    #####: 1101:      return -1;
        -: 1102:    }
        -: 1103:
    #####: 1104:    gainCard(choice2, state, 0, currentPlayer);
        -: 1105:
        -: 1106:    //discard card from hand
    #####: 1107:    discardCard(handPos, currentPlayer, state, 0);
        -: 1108:
        -: 1109:    //discard trashed card
    #####: 1110:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1111:    {
    #####: 1112:      if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1113:      {
    #####: 1114:        discardCard(i, currentPlayer, state, 0);
    #####: 1115:        break;
        -: 1116:      }
    #####: 1117:    }
        -: 1118:
    #####: 1119:    return 0;
        -: 1120:
        -: 1121:  case smithy:
      113: 1122:    return smithyCard(i, currentPlayer, state, handPos);
        -: 1123:    /*
        -: 1124:    //+3 Cards
        -: 1125:    for (i = 0; i < 3; i++)
        -: 1126:    {
        -: 1127:      drawCard(currentPlayer, state);
        -: 1128:    }
        -: 1129:
        -: 1130:    //discard card from hand
        -: 1131:    discardCard(handPos, currentPlayer, state, 0);
        -: 1132:    return 0;
        -: 1133:    */
        -: 1134:
        -: 1135:  case village:
        -: 1136:    //+1 Card
      309: 1137:    drawCard(currentPlayer, state);
        -: 1138:
        -: 1139:    //+2 Actions
      309: 1140:    state->numActions = state->numActions + 2;
        -: 1141:
        -: 1142:    //discard played card from hand
      309: 1143:    discardCard(handPos, currentPlayer, state, 0);
      309: 1144:    return 0;
        -: 1145:
        -: 1146:  case baron:
    #####: 1147:    state->numBuys++; //Increase buys by 1!
    #####: 1148:    if (choice1 > 0)
branch  0 never executed
branch  1 never executed
        -: 1149:    {                             //Boolean true or going to discard an estate
    #####: 1150:      int p = 0;                  //Iterator for hand!
    #####: 1151:      int card_not_discarded = 1; //Flag for discard set!
    #####: 1152:      while (card_not_discarded)
branch  0 never executed
branch  1 never executed
        -: 1153:      {
    #####: 1154:        if (state->hand[currentPlayer][p] == estate)
branch  0 never executed
branch  1 never executed
        -: 1155:        {                    //Found an estate card!
    #####: 1156:          state->coins += 4; //Add 4 coins to the amount of coins
    #####: 1157:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1158:          state->discardCount[currentPlayer]++;
    #####: 1159:          for (; p < state->handCount[currentPlayer]; p++)
branch  0 never executed
branch  1 never executed
        -: 1160:          {
    #####: 1161:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
    #####: 1162:          }
    #####: 1163:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1164:          state->handCount[currentPlayer]--;
    #####: 1165:          card_not_discarded = 0; //Exit the loop
    #####: 1166:        }
    #####: 1167:        else if (p > state->handCount[currentPlayer])
branch  0 never executed
branch  1 never executed
        -: 1168:        {
        -: 1169:          if (DEBUG)
        -: 1170:          {
        -: 1171:            printf("No estate cards in your hand, invalid choice\n");
        -: 1172:            printf("Must gain an estate if there are any\n");
        -: 1173:          }
    #####: 1174:          if (supplyCount(estate, state) > 0)
branch  0 never executed
branch  1 never executed
        -: 1175:          {
    #####: 1176:            gainCard(estate, state, 0, currentPlayer);
    #####: 1177:            state->supplyCount[estate]--; //Decrement estates
    #####: 1178:            if (supplyCount(estate, state) == 0)
branch  0 never executed
branch  1 never executed
        -: 1179:            {
    #####: 1180:              isGameOver(state);
    #####: 1181:            }
    #####: 1182:          }
    #####: 1183:          card_not_discarded = 0; //Exit the loop
    #####: 1184:        }
        -: 1185:
        -: 1186:        else
        -: 1187:        {
    #####: 1188:          p++; //Next card
        -: 1189:        }
        -: 1190:      }
    #####: 1191:    }
        -: 1192:
        -: 1193:    else
        -: 1194:    {
    #####: 1195:      if (supplyCount(estate, state) > 0)
branch  0 never executed
branch  1 never executed
        -: 1196:      {
    #####: 1197:        gainCard(estate, state, 0, currentPlayer); //Gain an estate
    #####: 1198:        state->supplyCount[estate]--;              //Decrement Estates
    #####: 1199:        if (supplyCount(estate, state) == 0)
branch  0 never executed
branch  1 never executed
        -: 1200:        {
    #####: 1201:          isGameOver(state);
    #####: 1202:        }
    #####: 1203:      }
        -: 1204:    }
        -: 1205:
    #####: 1206:    return 0;
        -: 1207:
        -: 1208:  case great_hall:
        -: 1209:    //+1 Card
    #####: 1210:    drawCard(currentPlayer, state);
        -: 1211:
        -: 1212:    //+1 Actions
    #####: 1213:    state->numActions++;
        -: 1214:
        -: 1215:    //discard card from hand
    #####: 1216:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1217:    return 0;
        -: 1218:
        -: 1219:  case minion:
    #####: 1220:    return minionCard(i, j, handPos, state, currentPlayer, choice1, choice2);
        -: 1221:    /*
        -: 1222:    //+1 action
        -: 1223:    state->numActions++;
        -: 1224:
        -: 1225:    //discard card from hand
        -: 1226:    discardCard(handPos, currentPlayer, state, 0);
        -: 1227:
        -: 1228:    if (choice1) //+2 coins
        -: 1229:    {
        -: 1230:      state->coins = state->coins + 2;
        -: 1231:    }
        -: 1232:
        -: 1233:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1234:    {
        -: 1235:      //discard hand
        -: 1236:      while (numHandCards(state) > 0)
        -: 1237:      {
        -: 1238:        discardCard(handPos, currentPlayer, state, 0);
        -: 1239:      }
        -: 1240:
        -: 1241:      //draw 4
        -: 1242:      for (i = 0; i < 4; i++)
        -: 1243:      {
        -: 1244:        drawCard(currentPlayer, state);
        -: 1245:      }
        -: 1246:
        -: 1247:      //other players discard hand and redraw if hand size > 4
        -: 1248:      for (i = 0; i < state->numPlayers; i++)
        -: 1249:      {
        -: 1250:        if (i != currentPlayer)
        -: 1251:        {
        -: 1252:          if (state->handCount[i] > 4)
        -: 1253:          {
        -: 1254:            //discard hand
        -: 1255:            while (state->handCount[i] > 0)
        -: 1256:            {
        -: 1257:              discardCard(handPos, i, state, 0);
        -: 1258:            }
        -: 1259:
        -: 1260:            //draw 4
        -: 1261:            for (j = 0; j < 4; j++)
        -: 1262:            {
        -: 1263:              drawCard(i, state);
        -: 1264:            }
        -: 1265:          }
        -: 1266:        }
        -: 1267:      }
        -: 1268:    }
        -: 1269:    return 0;
        -: 1270:    */
        -: 1271:
        -: 1272:  case steward:
    #####: 1273:    if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1274:    {
        -: 1275:      //+2 cards
    #####: 1276:      drawCard(currentPlayer, state);
    #####: 1277:      drawCard(currentPlayer, state);
    #####: 1278:    }
    #####: 1279:    else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1280:    {
        -: 1281:      //+2 coins
    #####: 1282:      state->coins = state->coins + 2;
    #####: 1283:    }
        -: 1284:    else
        -: 1285:    {
        -: 1286:      //trash 2 cards in hand
    #####: 1287:      discardCard(choice2, currentPlayer, state, 1);
    #####: 1288:      discardCard(choice3, currentPlayer, state, 1);
        -: 1289:    }
        -: 1290:
        -: 1291:    //discard card from hand
    #####: 1292:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1293:    return 0;
        -: 1294:
        -: 1295:  case tribute:
    #####: 1296:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
branch  0 never executed
branch  1 never executed
        -: 1297:    {
    #####: 1298:      if (state->deckCount[nextPlayer] > 0)
branch  0 never executed
branch  1 never executed
        -: 1299:      {
    #####: 1300:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1301:        state->deckCount[nextPlayer]--;
    #####: 1302:      }
    #####: 1303:      else if (state->discardCount[nextPlayer] > 0)
branch  0 never executed
branch  1 never executed
        -: 1304:      {
    #####: 1305:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1306:        state->discardCount[nextPlayer]--;
    #####: 1307:      }
        -: 1308:      else
        -: 1309:      {
        -: 1310:        //No Card to Reveal
        -: 1311:        if (DEBUG)
        -: 1312:        {
        -: 1313:          printf("No cards to reveal\n");
        -: 1314:        }
        -: 1315:      }
    #####: 1316:    }
        -: 1317:
        -: 1318:    else
        -: 1319:    {
    #####: 1320:      if (state->deckCount[nextPlayer] == 0)
branch  0 never executed
branch  1 never executed
        -: 1321:      {
    #####: 1322:        for (i = 0; i < state->discardCount[nextPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1323:        {
    #####: 1324:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1325:          state->deckCount[nextPlayer]++;
    #####: 1326:          state->discard[nextPlayer][i] = -1;
    #####: 1327:          state->discardCount[nextPlayer]--;
    #####: 1328:        }
        -: 1329:
    #####: 1330:        shuffle(nextPlayer, state); //Shuffle the deck
    #####: 1331:      }
    #####: 1332:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1333:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1334:      state->deckCount[nextPlayer]--;
    #####: 1335:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1336:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1337:      state->deckCount[nextPlayer]--;
        -: 1338:    }
        -: 1339:
    #####: 1340:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
branch  0 never executed
branch  1 never executed
        -: 1341:    { //If we have a duplicate card, just drop one
    #####: 1342:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1343:      state->playedCardCount++;
    #####: 1344:      tributeRevealedCards[1] = -1;
    #####: 1345:    }
        -: 1346:
    #####: 1347:    for (i = 0; i <= 2; i++)
branch  0 never executed
branch  1 never executed
        -: 1348:    {
    #####: 1349:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1350:      { //Treasure cards
    #####: 1351:        state->coins += 2;
    #####: 1352:      }
        -: 1353:
    #####: 1354:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -: 1355:      { //Victory Card Found
    #####: 1356:        drawCard(currentPlayer, state);
    #####: 1357:        drawCard(currentPlayer, state);
    #####: 1358:      }
        -: 1359:      else
        -: 1360:      { //Action Card
    #####: 1361:        state->numActions = state->numActions + 2;
        -: 1362:      }
    #####: 1363:    }
        -: 1364:
    #####: 1365:    return 0;
        -: 1366:
        -: 1367:  case ambassador:
    #####: 1368:    return ambassadorCard(i, j, choice1, choice2, handPos, state, currentPlayer);
        -: 1369:    /*j = 0; //used to check if player has enough cards to discard
        -: 1370:
        -: 1371:    if (choice2 > 2 || choice2 < 0)
        -: 1372:    {
        -: 1373:      return -1;
        -: 1374:    }
        -: 1375:
        -: 1376:    if (choice1 == handPos)
        -: 1377:    {
        -: 1378:      return -1;
        -: 1379:    }
        -: 1380:
        -: 1381:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1382:    {
        -: 1383:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1384:      {
        -: 1385:        j++;
        -: 1386:      }
        -: 1387:    }
        -: 1388:    if (j < choice2)
        -: 1389:    {
        -: 1390:      return -1;
        -: 1391:    }
        -: 1392:
        -: 1393:    if (DEBUG)
        -: 1394:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1395:
        -: 1396:    //increase supply count for choosen card by amount being discarded
        -: 1397:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1398:
        -: 1399:    //each other player gains a copy of revealed card
        -: 1400:    for (i = 0; i < state->numPlayers; i++)
        -: 1401:    {
        -: 1402:      if (i != currentPlayer)
        -: 1403:      {
        -: 1404:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1405:      }
        -: 1406:    }
        -: 1407:
        -: 1408:    //discard played card from hand
        -: 1409:    discardCard(handPos, currentPlayer, state, 0);
        -: 1410:
        -: 1411:    //trash copies of cards returned to supply
        -: 1412:    for (j = 0; j < choice2; j++)
        -: 1413:    {
        -: 1414:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1415:      {
        -: 1416:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1417:        {
        -: 1418:          discardCard(i, currentPlayer, state, 1);
        -: 1419:          break;
        -: 1420:        }
        -: 1421:      }
        -: 1422:    }
        -: 1423:    return 0;
        -: 1424:    */
        -: 1425:
        -: 1426:  case cutpurse:
        -: 1427:
    #####: 1428:    updateCoins(currentPlayer, state, 2);
    #####: 1429:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1430:    {
    #####: 1431:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1432:      {
    #####: 1433:        for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1434:        {
    #####: 1435:          if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1436:          {
    #####: 1437:            discardCard(j, i, state, 0);
    #####: 1438:            break;
        -: 1439:          }
    #####: 1440:          if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1441:          {
    #####: 1442:            for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1443:            {
        -: 1444:              if (DEBUG)
        -: 1445:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1446:            }
    #####: 1447:            break;
        -: 1448:          }
    #####: 1449:        }
    #####: 1450:      }
    #####: 1451:    }
        -: 1452:
        -: 1453:    //discard played card from hand
    #####: 1454:    discardCard(handPos, currentPlayer, state, 0);
        -: 1455:
    #####: 1456:    return 0;
        -: 1457:
        -: 1458:  case embargo:
        -: 1459:    //+2 Coins
    #####: 1460:    state->coins = state->coins + 2;
        -: 1461:
        -: 1462:    //see if selected pile is in play
    #####: 1463:    if (state->supplyCount[choice1] == -1)
branch  0 never executed
branch  1 never executed
        -: 1464:    {
    #####: 1465:      return -1;
        -: 1466:    }
        -: 1467:
        -: 1468:    //add embargo token to selected supply pile
    #####: 1469:    state->embargoTokens[choice1]++;
        -: 1470:
        -: 1471:    //trash card
    #####: 1472:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1473:    return 0;
        -: 1474:
        -: 1475:  case outpost:
        8: 1476:    return outpostCard(handPos, currentPlayer, state);
        -: 1477:    /*
        -: 1478:    //set outpost flag
        -: 1479:    state->outpostPlayed++;
        -: 1480:
        -: 1481:    //discard card
        -: 1482:    discardCard(handPos, currentPlayer, state, 0);
        -: 1483:    return 0;
        -: 1484:    */
        -: 1485:
        -: 1486:  case salvager:
        -: 1487:    //+1 buy
    #####: 1488:    state->numBuys++;
        -: 1489:
    #####: 1490:    if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1491:    {
        -: 1492:      //gain coins equal to trashed card
    #####: 1493:      state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1494:      //trash card
    #####: 1495:      discardCard(choice1, currentPlayer, state, 1);
    #####: 1496:    }
        -: 1497:
        -: 1498:    //discard card
    #####: 1499:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1500:    return 0;
        -: 1501:
        -: 1502:  case sea_hag:
    #####: 1503:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1504:    {
    #####: 1505:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1506:      {
    #####: 1507:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1508:        state->deckCount[i]--;
    #####: 1509:        state->discardCount[i]++;
    #####: 1510:        state->deck[i][state->deckCount[i]--] = curse; //Top card now a curse
    #####: 1511:      }
    #####: 1512:    }
    #####: 1513:    return 0;
        -: 1514:
        -: 1515:  case treasure_map:
        -: 1516:    //search hand for another treasure_map
    #####: 1517:    index = -1;
    #####: 1518:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1519:    {
    #####: 1520:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1521:      {
    #####: 1522:        index = i;
    #####: 1523:        break;
        -: 1524:      }
    #####: 1525:    }
    #####: 1526:    if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1527:    {
        -: 1528:      //trash both treasure cards
    #####: 1529:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1530:      discardCard(index, currentPlayer, state, 1);
        -: 1531:
        -: 1532:      //gain 4 Gold cards
    #####: 1533:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1534:      {
    #####: 1535:        gainCard(gold, state, 1, currentPlayer);
    #####: 1536:      }
        -: 1537:
        -: 1538:      //return success
    #####: 1539:      return 1;
        -: 1540:    }
        -: 1541:
        -: 1542:    //no second treasure_map found in hand
    #####: 1543:    return -1;
        -: 1544:  }
        -: 1545:
    #####: 1546:  return -1;
      431: 1547:}
        -: 1548:
function discardCard called 430 returned 100% blocks executed 80%
        -: 1549:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1550:{
        -: 1551:
        -: 1552:  //if card is not trashed, added to Played pile
      430: 1553:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1554:  {
        -: 1555:    //add card to played pile
      430: 1556:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
      430: 1557:    state->playedCardCount++;
      430: 1558:  }
        -: 1559:
        -: 1560:  //set played card to -1
      430: 1561:  state->hand[currentPlayer][handPos] = -1;
        -: 1562:
        -: 1563:  //remove card from player's hand
      430: 1564:  if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1565:  {
        -: 1566:    //reduce number of cards in hand
    #####: 1567:    state->handCount[currentPlayer]--;
    #####: 1568:  }
      430: 1569:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1570:  {
        -: 1571:    //reduce number of cards in hand
    #####: 1572:    state->handCount[currentPlayer]--;
    #####: 1573:  }
        -: 1574:  else
        -: 1575:  {
        -: 1576:    //replace discarded card with last card in hand
      430: 1577:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1578:    //set last card to -1
      430: 1579:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1580:    //reduce number of cards in hand
      430: 1581:    state->handCount[currentPlayer]--;
        -: 1582:  }
        -: 1583:
      430: 1584:  return 0;
        -: 1585:}
        -: 1586:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1587:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1588:{
        -: 1589:  //Note: supplyPos is enum of choosen card
        -: 1590:
        -: 1591:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1592:  if (supplyCount(supplyPos, state) < 1)
branch  0 never executed
branch  1 never executed
        -: 1593:  {
    #####: 1594:    return -1;
        -: 1595:  }
        -: 1596:
        -: 1597:  //added card for [whoseTurn] current player:
        -: 1598:  // toFlag = 0 : add to discard
        -: 1599:  // toFlag = 1 : add to deck
        -: 1600:  // toFlag = 2 : add to hand
        -: 1601:
    #####: 1602:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1603:  {
    #####: 1604:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1605:    state->deckCount[player]++;
    #####: 1606:  }
    #####: 1607:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1608:  {
    #####: 1609:    state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1610:    state->handCount[player]++;
    #####: 1611:  }
        -: 1612:  else
        -: 1613:  {
    #####: 1614:    state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1615:    state->discardCount[player]++;
        -: 1616:  }
        -: 1617:
        -: 1618:  //decrease number in supply pile
    #####: 1619:  state->supplyCount[supplyPos]--;
        -: 1620:
    #####: 1621:  return 0;
    #####: 1622:}
        -: 1623:
function updateCoins called 83 returned 100% blocks executed 85%
        -: 1624:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1625:{
        -: 1626:  int i;
        -: 1627:
        -: 1628:  //reset coin count
       83: 1629:  state->coins = 0;
        -: 1630:
        -: 1631:  //add coins for each Treasure card in player's hand
      996: 1632:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1633:  {
      415: 1634:    if (state->hand[player][i] == copper)
branch  0 taken 80%
branch  1 taken 20%
        -: 1635:    {
      332: 1636:      state->coins += 1;
      332: 1637:    }
       83: 1638:    else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1639:    {
    #####: 1640:      state->coins += 2;
    #####: 1641:    }
       83: 1642:    else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1643:    {
    #####: 1644:      state->coins += 3;
    #####: 1645:    }
      415: 1646:  }
        -: 1647:
        -: 1648:  //add bonus
       83: 1649:  state->coins += bonus;
        -: 1650:
       83: 1651:  return 0;
        -: 1652:}
        -: 1653:
        -: 1654://end of dominion.c
