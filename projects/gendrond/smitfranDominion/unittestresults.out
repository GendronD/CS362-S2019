Result for running dominion.c tests:
unittest1.c:
Testing Buy Card Function...
Initializing Game Code For Tests...
RUNNING TESTS ON BUY CARD FUNCTION

+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 0.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 1.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 2.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 1.
TESTED WITH numBuys = 3.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 0.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 1.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 2.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 0.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 1.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 2.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 3.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 4.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 5.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 6.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 7.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 8.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 0.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 1.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 2.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 3.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 4.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 5.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 10.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 15.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 20.
TESTED WITH supplyPos = 9.
+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED.
TESTED WITH whoseTurn = 2.
TESTED WITH numBuys = 3.
TESTED WITH coins = 100.
TESTED WITH supplyPos = 9.
+===================================+

TESTS ON BUY CARD FUNCTION COMPLETED.
File 'dominion.c'
Lines executed:31.02% of 648
Branches executed:33.81% of 417
Taken at least once:24.70% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

unittest2.c:
Testing Is Game Over Function...
Initializing Game Code For Tests...
RUNNING TESTS ON IS GAME OVER FUNCTION FUNCTION

+===================================+
TEST SUCCESSFULLY COMPLETED - Game Ended.
TESTED WITH province = 0
.+===================================+
+===================================+
TEST SUCCESSFULLY COMPLETED - Game Continued.
TESTED WITH province = 1
.+===================================+
+===============================================+
TEST SUCCESSFULLY COMPLETED - Game Continued.
TESTED WITH no empty supplies: > 0.
+===============================================+
+===============================================+
TEST SUCCESSFULLY COMPLETED - Game Ended.
TESTED WITH supplies = 0.
+===============================================+
+===============================================+
TEST FAILED - Game Ended.
TESTED WITH some empty supplies.
+===============================================+

TESTS ON IS GAME OVER FUNCTION COMPLETED.
File 'dominion.c'
Lines executed:31.02% of 648
Branches executed:33.81% of 417
Taken at least once:24.70% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

unittest3.c:
Testing getCost Function...
RUNNING TESTS ON IS GAME OVER FUNCTION FUNCTION

Testing with Correct Data:
+===================================+
Card curse Cost Passed.
Card estate Cost Passed.
Card duchy Cost Passed.
Card province Cost Passed.
Card copper Cost Passed.
Card sivler Cost Passed.
Card gold Cost Passed.
Card adventurer Cost Passed.
Card council_room Cost Passed.
Card feast Cost Passed.
Card gardens Cost Passed.
Card mine Cost Passed.
Card remodel Cost Passed.
Card smithy Cost Passed.
Card village Cost Passed.
Card baron Cost Passed.
Card great_hall Cost Passed.
Card minion Cost Passed.
Card steward Cost Passed.
Card tribute Cost Passed.
Card ambassador Cost Passed.
Card cutpurse Cost Passed.
Card embargo Cost Passed.
Card outposts Cost Passed.
Card salvager Cost Passed.
Card sea_hag Cost Passed.
Card treasure_map Cost Passed.
TEST SUCCESSFULLY COMPLETED - No Errors.
+===================================+

TESTS ON GETCOST FUNCTION COMPLETED.
File 'dominion.c'
Lines executed:31.02% of 648
Branches executed:33.81% of 417
Taken at least once:24.70% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

unittest4.c:
Testing numHandCards Function...
RUNNING TESTS ON NUMHANDCARDS FUNCTION FUNCTION

Testing with Correct Data:
+===================================+
TEST SUCCESSFULLY COMPLETED - No Errors.
Player 1 Turn with 10 cards - returned 10.
TEST SUCCESSFULLY COMPLETED - No Errors.
Player 2 Turn with 13 cards - returned 13.
+===================================+

TESTS ON NUMHANDCARDS FUNCTION COMPLETED.
File 'dominion.c'
Lines executed:31.02% of 648
Branches executed:33.81% of 417
Taken at least once:24.70% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

cardtest1.c:
Testing Adventurer Card...
+===================================+
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - Card Not Drawn from Deck.
Testing For Deck.
TEST FAILED - MISSING TWO NEW TREASURE CARDS FROM HAND.
TEST PASSED - CARDS SUCCESSFULLY DISCARDED.
+=============================================+

TESTS ON ADVENTURER CARD COMPLETED.
File 'dominion.c'
Lines executed:31.48% of 648
Branches executed:34.77% of 417
Taken at least once:25.18% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

cardtest2.c:
Testing Smithy Card...
+===================================+
TEST FAILED - Cards Not Properly Added.
TEST PASSED - Victory Cards Not Effected.
adventurer PASSED.
council_room FAILED.
mine FAILED.
remodel FAILED.
smithy FAILED.
village FAILED.
baron FAILED.
great_hall FAILED.
ambassador FAILED.
outposts FAILED.
+===================================+

TESTS ON ADVENTURER CARD COMPLETED.
File 'dominion.c'
Lines executed:31.48% of 648
Branches executed:34.77% of 417
Taken at least once:25.18% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

cardtest3.c:
Testing Village Card...
+===================================+
TEST PASSED - Card Balance.
TEST Failed - Action Not Properly Added.
+===================================+

TESTS ON VILLAGE CARD COMPLETED.
File 'dominion.c'
Lines executed:31.48% of 648
Branches executed:34.77% of 417
Taken at least once:25.18% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

cardtest4.c:
Testing Outpost Card.
+===================================+
Number of Outpost Before: 0.
Number of Outpost After: 1.
TEST PASSED - Outpost Number Not Increased.
TEST PASSED - Card Properly Discarded.
+===================================+

TESTS ON OUTPOST CARD COMPLETED.
File 'dominion.c'
Lines executed:31.48% of 648
Branches executed:34.77% of 417
Taken at least once:25.18% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:19
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 364 returned 100% blocks executed 85%
        -:    8:int compare(const void* a, const void* b) {
      364:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   10:    return 1;
      364:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
      130:   12:    return -1;
      234:   13:  return 0;
      364:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 13 returned 100% blocks executed 87%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       13:   44:  SelectStream(1);
       13:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       26:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       13:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      286:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
     2860:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
     2470:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
     1300:   65:        }
      130:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       13:   73:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   74:    {
       13:   75:      state->supplyCount[curse] = 10;
       13:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       13:   87:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   88:    {
       13:   89:      state->supplyCount[estate] = 8;
       13:   90:      state->supplyCount[duchy] = 8;
       13:   91:      state->supplyCount[province] = 8;
       13:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       13:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       13:  102:  state->supplyCount[silver] = 40;
       13:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      546:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
     4290:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
     2015:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      247:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 2%
branch  3 taken 98%
        -:  114:		{
       15:  115:		  if (numPlayers == 2){ 
branch  0 taken 100%
branch  1 taken 0%
       15:  116:		    state->supplyCount[i] = 8; 
       15:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
       15:  119:		}
        -:  120:	      else
        -:  121:		{
      115:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      130:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1885:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
     1885:  130:	}
        -:  131:
      260:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       78:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  139:    {
       26:  140:      state->deckCount[i] = 0;
      208:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:	{
       78:  143:	  state->deck[i][j] = estate;
       78:  144:	  state->deckCount[i]++;
       78:  145:	}
      416:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:	{
      182:  148:	  state->deck[i][j] = copper;
      182:  149:	  state->deckCount[i]++;		
      182:  150:	}
       26:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       78:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  155:    {
       26:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
       26:  160:    }
        -:  161:
        -:  162:  //draw player hands
       78:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       26:  166:      state->handCount[i] = 0;
       26:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
       26:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      728:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
      351:  178:      state->embargoTokens[i] = 0;
      351:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       13:  182:  state->outpostPlayed = 0;
       13:  183:  state->phase = 0;
       13:  184:  state->numActions = 1;
       13:  185:  state->numBuys = 1;
       13:  186:  state->playedCardCount = 0;
       13:  187:  state->whoseTurn = 0;
       13:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      156:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
       65:  193:    drawCard(state->whoseTurn, state);
       65:  194:  }
        -:  195:
       13:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       13:  198:  return 0;
       13:  199:}
        -:  200:
function shuffle called 144 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      144:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      144:  209:  if (state->deckCount[player] < 1)
branch  0 taken 82%
branch  1 taken 18%
      118:  210:    return -1;
       26:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      572:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
      260:  215:    card = floor(Random() * state->deckCount[player]);
      260:  216:    newDeck[newDeckPos] = state->deck[player][card];
      260:  217:    newDeckPos++;
     1820:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29%
      650:  219:      state->deck[player][i] = state->deck[player][i+1];
      650:  220:    }
      260:  221:    state->deckCount[player]--;
        -:  222:  }
      572:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
      260:  224:    state->deck[player][i] = newDeck[i];
      260:  225:    state->deckCount[player]++;
      260:  226:  }
        -:  227:
       26:  228:  return 0;
      144:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
function buyCard called 1600 returned 100% blocks executed 50%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
     1600:  280:  who = state->whoseTurn;
        -:  281:
     1600:  282:  if (state->numBuys < 1){
branch  0 taken 25%
branch  1 taken 75%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
      400:  285:    return -1;
     1200:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 taken 100%
branch  1 taken 0%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
     1200:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
     1600:  309:}
        -:  310:
function numHandCards called 4 returned 100% blocks executed 100%
        -:  311:int numHandCards(struct gameState *state) {
        4:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 1200 returned 100% blocks executed 100%
        -:  320:int supplyCount(int card, struct gameState *state) {
     1200:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 210 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
      210:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 10 returned 100% blocks executed 84%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       10:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 60%
branch  1 taken 40%
        -:  396:    {
        6:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      208:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 0%
branch  1 taken 100%
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
      100:  408:    }
        4:  409:  if ( j >= 3)
branch  0 taken 0%
branch  1 taken 100%
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
        4:  414:  return 0;
       10:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 575 returned 100% blocks executed 75%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      575:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 21%
branch  1 taken 79%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      236:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100%
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
      118:  538:    state->deckCount[player] = state->discardCount[player];
      118:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      118:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      118:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      118:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      118:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      118:  559:    if (deckCounter == 0)
branch  0 taken 100%
branch  1 taken 0%
      118:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
      457:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      457:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      457:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      457:  576:    state->deckCount[player]--;
      457:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      457:  580:  return 0;
      575:  581:}
        -:  582:
function getCost called 108 returned 100% blocks executed 96%
        -:  583:int getCost(int cardNumber)
        -:  584:{
      108:  585:  switch( cardNumber ) 
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
        4:  588:      return 0;
        -:  589:    case estate:
        4:  590:      return 2;
        -:  591:    case duchy:
        4:  592:      return 5;
        -:  593:    case province:
        4:  594:      return 8;
        -:  595:    case copper:
        4:  596:      return 0;
        -:  597:    case silver:
        4:  598:      return 3;
        -:  599:    case gold:
        4:  600:      return 6;
        -:  601:    case adventurer:
        4:  602:      return 6;
        -:  603:    case council_room:
        4:  604:      return 5;
        -:  605:    case feast:
        4:  606:      return 4;
        -:  607:    case gardens:
        4:  608:      return 4;
        -:  609:    case mine:
        4:  610:      return 5;
        -:  611:    case remodel:
        4:  612:      return 4;
        -:  613:    case smithy:
        4:  614:      return 4;
        -:  615:    case village:
        4:  616:      return 3;
        -:  617:    case baron:
        4:  618:      return 4;
        -:  619:    case great_hall:
        4:  620:      return 3;
        -:  621:    case minion:
        4:  622:      return 5;
        -:  623:    case steward:
        4:  624:      return 3;
        -:  625:    case tribute:
        4:  626:      return 5;
        -:  627:    case ambassador:
        4:  628:      return 3;
        -:  629:    case cutpurse:
        4:  630:      return 4;
        -:  631:    case embargo: 
        4:  632:      return 2;
        -:  633:    case outpost:
        4:  634:      return 5;
        -:  635:    case salvager:
        4:  636:      return 4;
        -:  637:    case sea_hag:
        4:  638:      return 4;
        -:  639:    case treasure_map:
        4:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
      108:  644:}
        -:  645:
function adventurerCase called 3 returned 100% blocks executed 40%
        -:  646:void adventurerCase(int card, struct gameState *state, int currentPlayer, int z, int drawntreasure, int temphand[], int cardDrawn)
        -:  647:{
        6:  648:  while(drawntreasure<3){//bug placed here, should be 2 not three
branch  0 taken 0%
branch  1 taken 100%
    #####:  649:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  650:      shuffle(currentPlayer, state);
    #####:  651:    }
    #####:  652:    drawCard(currentPlayer, state);
    #####:  653:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  654:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  655:      drawntreasure++;
        -:  656:    else{ 
    #####:  657:      temphand[z]=cardDrawn;
    #####:  658:      state->handCount[currentPlayer]--;//this should just remove the top card (the most recently drawn one).
    #####:  659:      z++;
        -:  660:    }
        -:  661:  } 
        6:  662:  while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100%
    #####:  663:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  664:    z=z-1;
        -:  665:  }
        3:  666:}
        -:  667:
function smithyCase called 102 returned 100% blocks executed 100%
        -:  668:void smithyCase(int card, struct gameState *state, int currentPlayer, int handPos)
        -:  669:{
        -:  670:  int i;
        -:  671:  //+3 Cards
     1020:  672:  for (i = 0; i < 4; i++)//bug placed here, iterate i to 4, so Smithy will have 4 cards
branch  0 taken 80%
branch  1 taken 20%
        -:  673:  {
      408:  674:    drawCard(currentPlayer, state);
      408:  675:  }
        -:  676:
        -:  677:  //discard card from hand
      102:  678:  discardCard(handPos, currentPlayer, state, 0);
      102:  679:}
        -:  680:
function villageCase called 102 returned 100% blocks executed 100%
        -:  681:void villageCase(int card, struct gameState *state, int currentPlayer, int handPos)
        -:  682:{
        -:  683:  //+1 Card
      102:  684:  drawCard(currentPlayer, state);
        -:  685:
        -:  686:  //+2 Actions
      102:  687:  state->numActions = state->numActions + 1;//bug placed here, adding 1 action instead of 2
        -:  688:
        -:  689:  //discard played card from hand
      102:  690:  discardCard(handPos, currentPlayer, state, 0);
      102:  691:}
        -:  692:
function great_hallCase called 0 returned 0% blocks executed 0%
        -:  693:void great_hallCase(int card, struct gameState *state, int currentPlayer, int handPos)
        -:  694:{
        -:  695:  //+1 Card
    #####:  696:  drawCard(currentPlayer, state);
        -:  697:
        -:  698:  //+1 Actions
    #####:  699:  state->numActions++;
        -:  700:
        -:  701:  //discard card from hand
        -:  702:  // discardCard(handPos, currentPlayer, state, 0);//oopsy bug here, comment shouldn't be here
    #####:  703:}
        -:  704:
function outpostCase called 2 returned 100% blocks executed 100%
        -:  705:void outpostCase(int card, struct gameState *state, int currentPlayer, int handPos)
        -:  706:{
        -:  707:  //set outpost flag
        2:  708:  state->outpostPlayed++;
        -:  709:
        -:  710:  //discard card
        2:  711:  discardCard(handPos, currentPlayer, state, 0);
        2:  712:}
        -:  713:
        -:  714:
        -:  715:
function cardEffect called 206 returned 100% blocks executed 2%
        -:  716:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  717:{
        -:  718:  int i;
        -:  719:  int j;
        -:  720:  int k;
        -:  721:  int x;
        -:  722:  int index;
      206:  723:  int currentPlayer = whoseTurn(state);
      206:  724:  int nextPlayer = currentPlayer + 1;
        -:  725:
      206:  726:  int tributeRevealedCards[2] = {-1, -1};
        -:  727:  int temphand[MAX_HAND];// moved above the if statement
      206:  728:  int drawntreasure=0;
        -:  729:  int cardDrawn;
      206:  730:  int z = 0;// this is the counter for the temp hand
      206:  731:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0%
branch  1 taken 100%
    #####:  732:    nextPlayer = 0;
    #####:  733:  }
        -:  734:  
        -:  735:	
        -:  736:  //uses switch to select card and perform actions
      206:  737:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 50%
branch  7 taken 50%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 1%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  738:    {
        -:  739:    case adventurer:
        -:  740:      //refactored, call adventurerCase function
    #####:  741:      adventurerCase(card, state, currentPlayer, z, drawntreasure, temphand, cardDrawn);
    #####:  742:      return 0;
        -:  743:			
        -:  744:    case council_room:
        -:  745:      //+4 Cards
    #####:  746:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  747:	{
    #####:  748:	  drawCard(currentPlayer, state);
    #####:  749:	}
        -:  750:			
        -:  751:      //+1 Buy
    #####:  752:      state->numBuys++;
        -:  753:			
        -:  754:      //Each other player draws a card
    #####:  755:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  756:	{
    #####:  757:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  758:	    {
    #####:  759:	      drawCard(i, state);
    #####:  760:	    }
    #####:  761:	}
        -:  762:			
        -:  763:      //put played card in played card pile
    #####:  764:      discardCard(handPos, currentPlayer, state, 0);
        -:  765:			
    #####:  766:      return 0;
        -:  767:			
        -:  768:    case feast:
        -:  769:      //gain card with cost up to 5
        -:  770:      //Backup hand
    #####:  771:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  772:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  773:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  774:      }
        -:  775:      //Backup hand
        -:  776:
        -:  777:      //Update Coins for Buy
    #####:  778:      updateCoins(currentPlayer, state, 5);
    #####:  779:      x = 1;//Condition to loop on
    #####:  780:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  781:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  782:	  if (DEBUG)
        -:  783:	    printf("None of that card left, sorry!\n");
        -:  784:
        -:  785:	  if (DEBUG){
        -:  786:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  787:	  }
    #####:  788:	}
    #####:  789:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  790:	  printf("That card is too expensive!\n");
        -:  791:
        -:  792:	  if (DEBUG){
        -:  793:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  794:	  }
    #####:  795:	}
        -:  796:	else{
        -:  797:
        -:  798:	  if (DEBUG){
        -:  799:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  800:	  }
        -:  801:
    #####:  802:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  803:	  x = 0;//No more buying cards
        -:  804:
        -:  805:	  if (DEBUG){
        -:  806:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  807:	  }
        -:  808:
        -:  809:	}
        -:  810:      }     
        -:  811:
        -:  812:      //Reset Hand
    #####:  813:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  814:	state->hand[currentPlayer][i] = temphand[i];
    #####:  815:	temphand[i] = -1;
    #####:  816:      }
        -:  817:      //Reset Hand
        -:  818:      			
    #####:  819:      return 0;
        -:  820:			
        -:  821:    case gardens:
    #####:  822:      return -1;
        -:  823:			
        -:  824:    case mine:
    #####:  825:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  826:
    #####:  827:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  828:	{
    #####:  829:	  return -1;
        -:  830:	}
        -:  831:		
    #####:  832:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  833:	{
    #####:  834:	  return -1;
        -:  835:	}
        -:  836:
    #####:  837:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  838:	{
    #####:  839:	  return -1;
        -:  840:	}
        -:  841:
    #####:  842:      gainCard(choice2, state, 2, currentPlayer);
        -:  843:
        -:  844:      //discard card from hand
    #####:  845:      discardCard(handPos, currentPlayer, state, 0);
        -:  846:
        -:  847:      //discard trashed card
    #####:  848:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  849:	{
    #####:  850:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  851:	    {
    #####:  852:	      discardCard(i, currentPlayer, state, 0);			
    #####:  853:	      break;
        -:  854:	    }
    #####:  855:	}
        -:  856:			
    #####:  857:      return 0;
        -:  858:			
        -:  859:    case remodel:
    #####:  860:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  861:
    #####:  862:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  863:	{
    #####:  864:	  return -1;
        -:  865:	}
        -:  866:
    #####:  867:      gainCard(choice2, state, 0, currentPlayer);
        -:  868:
        -:  869:      //discard card from hand
    #####:  870:      discardCard(handPos, currentPlayer, state, 0);
        -:  871:
        -:  872:      //discard trashed card
    #####:  873:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  874:	{
    #####:  875:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  876:	    {
    #####:  877:	      discardCard(i, currentPlayer, state, 0);			
    #####:  878:	      break;
        -:  879:	    }
    #####:  880:	}
        -:  881:
        -:  882:
    #####:  883:      return 0;
        -:  884:		
        -:  885:    case smithy:
        -:  886:      //refactored, call function smithyCase
      102:  887:      smithyCase(card, state, currentPlayer, handPos);
      102:  888:      return 0;
        -:  889:		
        -:  890:    case village:
        -:  891:      //refactored, call function villageCase
      102:  892:      villageCase(card, state, currentPlayer, handPos);
      102:  893:      return 0;
        -:  894:		
        -:  895:    case baron:
    #####:  896:      state->numBuys++;//Increase buys by 1!
    #####:  897:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  898:	int p = 0;//Iterator for hand!
    #####:  899:	int card_not_discarded = 1;//Flag for discard set!
    #####:  900:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  901:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  902:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  903:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  904:	    state->discardCount[currentPlayer]++;
    #####:  905:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  906:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  907:	    }
    #####:  908:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  909:	    state->handCount[currentPlayer]--;
    #####:  910:	    card_not_discarded = 0;//Exit the loop
    #####:  911:	  }
    #####:  912:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  913:	    if(DEBUG) {
        -:  914:	      printf("No estate cards in your hand, invalid choice\n");
        -:  915:	      printf("Must gain an estate if there are any\n");
        -:  916:	    }
    #####:  917:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  918:	      gainCard(estate, state, 0, currentPlayer);
    #####:  919:	      state->supplyCount[estate]--;//Decrement estates
    #####:  920:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  921:		isGameOver(state);
    #####:  922:	      }
    #####:  923:	    }
    #####:  924:	    card_not_discarded = 0;//Exit the loop
    #####:  925:	  }
        -:  926:			    
        -:  927:	  else{
    #####:  928:	    p++;//Next card
        -:  929:	  }
        -:  930:	}
    #####:  931:      }
        -:  932:			    
        -:  933:      else{
    #####:  934:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  935:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  936:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  937:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  938:	    isGameOver(state);
    #####:  939:	  }
    #####:  940:	}
        -:  941:      }
        -:  942:	    
        -:  943:      
    #####:  944:      return 0;
        -:  945:		
        -:  946:    case great_hall:
        -:  947:      //refactored, call great_hallCase function
    #####:  948:      great_hallCase(card, state, currentPlayer, handPos);
    #####:  949:      return 0;
        -:  950:		
        -:  951:    case minion:
        -:  952:      //+1 action
    #####:  953:      state->numActions++;
        -:  954:			
        -:  955:      //discard card from hand
    #####:  956:      discardCard(handPos, currentPlayer, state, 0);
        -:  957:			
    #####:  958:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  959:	{
    #####:  960:	  state->coins = state->coins + 2;
    #####:  961:	}
        -:  962:			
    #####:  963:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  964:	{
        -:  965:	  //discard hand
    #####:  966:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  967:	    {
    #####:  968:	      discardCard(handPos, currentPlayer, state, 0);
        -:  969:	    }
        -:  970:				
        -:  971:	  //draw 4
    #####:  972:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  973:	    {
    #####:  974:	      drawCard(currentPlayer, state);
    #####:  975:	    }
        -:  976:				
        -:  977:	  //other players discard hand and redraw if hand size > 4
    #####:  978:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  979:	    {
    #####:  980:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  981:		{
    #####:  982:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  983:		    {
        -:  984:		      //discard hand
    #####:  985:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  986:			{
    #####:  987:			  discardCard(handPos, i, state, 0);
        -:  988:			}
        -:  989:							
        -:  990:		      //draw 4
    #####:  991:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  992:			{
    #####:  993:			  drawCard(i, state);
    #####:  994:			}
    #####:  995:		    }
    #####:  996:		}
    #####:  997:	    }
        -:  998:				
    #####:  999:	}
    #####: 1000:      return 0;
        -: 1001:		
        -: 1002:    case steward:
    #####: 1003:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1004:	{
        -: 1005:	  //+2 cards
    #####: 1006:	  drawCard(currentPlayer, state);
    #####: 1007:	  drawCard(currentPlayer, state);
    #####: 1008:	}
    #####: 1009:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1010:	{
        -: 1011:	  //+2 coins
    #####: 1012:	  state->coins = state->coins + 2;
    #####: 1013:	}
        -: 1014:      else
        -: 1015:	{
        -: 1016:	  //trash 2 cards in hand
    #####: 1017:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1018:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1019:	}
        -: 1020:			
        -: 1021:      //discard card from hand
    #####: 1022:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1023:      return 0;
        -: 1024:		
        -: 1025:    case tribute:
    #####: 1026:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1027:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1028:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1029:	  state->deckCount[nextPlayer]--;
    #####: 1030:	}
    #####: 1031:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1032:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1033:	  state->discardCount[nextPlayer]--;
    #####: 1034:	}
        -: 1035:	else{
        -: 1036:	  //No Card to Reveal
        -: 1037:	  if (DEBUG){
        -: 1038:	    printf("No cards to reveal\n");
        -: 1039:	  }
        -: 1040:	}
    #####: 1041:      }
        -: 1042:	    
        -: 1043:      else{
    #####: 1044:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1045:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1046:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1047:	    state->deckCount[nextPlayer]++;
    #####: 1048:	    state->discard[nextPlayer][i] = -1;
    #####: 1049:	    state->discardCount[nextPlayer]--;
    #####: 1050:	  }
        -: 1051:			    
    #####: 1052:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1053:	} 
    #####: 1054:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1055:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1056:	state->deckCount[nextPlayer]--;
    #####: 1057:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1058:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1059:	state->deckCount[nextPlayer]--;
        -: 1060:      }    
        -: 1061:		       
    #####: 1062:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1063:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1064:	state->playedCardCount++;
    #####: 1065:	tributeRevealedCards[1] = -1;
    #####: 1066:      }
        -: 1067:
    #####: 1068:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1069:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1070:	  state->coins += 2;
    #####: 1071:	}
        -: 1072:		    
    #####: 1073:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1074:	  drawCard(currentPlayer, state);
    #####: 1075:	  drawCard(currentPlayer, state);
    #####: 1076:	}
        -: 1077:	else{//Action Card
    #####: 1078:	  state->numActions = state->numActions + 2;
        -: 1079:	}
    #####: 1080:      }
        -: 1081:	    
    #####: 1082:      return 0;
        -: 1083:		
        -: 1084:    case ambassador:
    #####: 1085:      j = 0;		//used to check if player has enough cards to discard
        -: 1086:
    #####: 1087:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1088:	{
    #####: 1089:	  return -1;				
        -: 1090:	}
        -: 1091:
    #####: 1092:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1093:	{
    #####: 1094:	  return -1;
        -: 1095:	}
        -: 1096:
    #####: 1097:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1098:	{
    #####: 1099:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1100:	    {
    #####: 1101:	      j++;
    #####: 1102:	    }
    #####: 1103:	}
    #####: 1104:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1105:	{
    #####: 1106:	  return -1;				
        -: 1107:	}
        -: 1108:
        -: 1109:      if (DEBUG) 
        -: 1110:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1111:
        -: 1112:      //increase supply count for choosen card by amount being discarded
    #####: 1113:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1114:			
        -: 1115:      //each other player gains a copy of revealed card
    #####: 1116:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1117:	{
    #####: 1118:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1119:	    {
    #####: 1120:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1121:	    }
    #####: 1122:	}
        -: 1123:
        -: 1124:      //discard played card from hand
    #####: 1125:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1126:
        -: 1127:      //trash copies of cards returned to supply
    #####: 1128:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1129:	{
    #####: 1130:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1131:	    {
    #####: 1132:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1133:		{
    #####: 1134:		  discardCard(i, currentPlayer, state, 1);
    #####: 1135:		  break;
        -: 1136:		}
    #####: 1137:	    }
    #####: 1138:	}			
        -: 1139:
    #####: 1140:      return 0;
        -: 1141:		
        -: 1142:    case cutpurse:
        -: 1143:
    #####: 1144:      updateCoins(currentPlayer, state, 2);
    #####: 1145:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1146:	{
    #####: 1147:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1148:	    {
    #####: 1149:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1150:		{
    #####: 1151:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1152:		    {
    #####: 1153:		      discardCard(j, i, state, 0);
    #####: 1154:		      break;
        -: 1155:		    }
    #####: 1156:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1157:		    {
    #####: 1158:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1159:			{
        -: 1160:			  if (DEBUG)
        -: 1161:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1162:			}	
    #####: 1163:		      break;
        -: 1164:		    }		
    #####: 1165:		}
        -: 1166:					
    #####: 1167:	    }
        -: 1168:				
    #####: 1169:	}				
        -: 1170:
        -: 1171:      //discard played card from hand
    #####: 1172:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1173:
    #####: 1174:      return 0;
        -: 1175:
        -: 1176:		
        -: 1177:    case embargo: 
        -: 1178:      //+2 Coins
    #####: 1179:      state->coins = state->coins + 2;
        -: 1180:			
        -: 1181:      //see if selected pile is in play
    #####: 1182:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1183:	{
    #####: 1184:	  return -1;
        -: 1185:	}
        -: 1186:			
        -: 1187:      //add embargo token to selected supply pile
    #####: 1188:      state->embargoTokens[choice1]++;
        -: 1189:			
        -: 1190:      //trash card
    #####: 1191:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1192:      return 0;
        -: 1193:		
        -: 1194:    case outpost:
        -: 1195:      //refactored, call outpostCase function
        2: 1196:      outpostCase(card, state, currentPlayer, handPos);
        2: 1197:      return 0;
        -: 1198:		
        -: 1199:    case salvager:
        -: 1200:      //+1 buy
    #####: 1201:      state->numBuys++;
        -: 1202:			
    #####: 1203:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1204:	{
        -: 1205:	  //gain coins equal to trashed card
    #####: 1206:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1207:	  //trash card
    #####: 1208:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1209:	}
        -: 1210:			
        -: 1211:      //discard card
    #####: 1212:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1213:      return 0;
        -: 1214:		
        -: 1215:    case sea_hag:
    #####: 1216:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1217:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1218:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1219:	  state->discardCount[i]++;
    #####: 1220:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1221:	}
    #####: 1222:      }
    #####: 1223:      return 0;
        -: 1224:		
        -: 1225:    case treasure_map:
        -: 1226:      //search hand for another treasure_map
    #####: 1227:      index = -1;
    #####: 1228:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1229:	{
    #####: 1230:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1231:	    {
    #####: 1232:	      index = i;
    #####: 1233:	      break;
        -: 1234:	    }
    #####: 1235:	}
    #####: 1236:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1237:	{
        -: 1238:	  //trash both treasure cards
    #####: 1239:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1240:	  discardCard(index, currentPlayer, state, 1);
        -: 1241:
        -: 1242:	  //gain 4 Gold cards
    #####: 1243:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1244:	    {
    #####: 1245:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1246:	    }
        -: 1247:				
        -: 1248:	  //return success
    #####: 1249:	  return 1;
        -: 1250:	}
        -: 1251:			
        -: 1252:      //no second treasure_map found in hand
    #####: 1253:      return -1;
        -: 1254:    }
        -: 1255:	
    #####: 1256:  return -1;
      206: 1257:}
        -: 1258:
function discardCard called 206 returned 100% blocks executed 80%
        -: 1259:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1260:{
        -: 1261:	
        -: 1262:  //if card is not trashed, added to Played pile 
      206: 1263:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1264:    {
        -: 1265:      //add card to played pile
      206: 1266:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      206: 1267:      state->playedCardCount++;
      206: 1268:    }
        -: 1269:	
        -: 1270:  //set played card to -1
      206: 1271:  state->hand[currentPlayer][handPos] = -1;
        -: 1272:	
        -: 1273:  //remove card from player's hand
      206: 1274:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1275:    {
        -: 1276:      //reduce number of cards in hand
    #####: 1277:      state->handCount[currentPlayer]--;
    #####: 1278:    }
      206: 1279:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1280:    {
        -: 1281:      //reduce number of cards in hand
    #####: 1282:      state->handCount[currentPlayer]--;
    #####: 1283:    }
        -: 1284:  else 	
        -: 1285:    {
        -: 1286:      //replace discarded card with last card in hand
      206: 1287:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1288:      //set last card to -1
      206: 1289:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1290:      //reduce number of cards in hand
      206: 1291:      state->handCount[currentPlayer]--;
        -: 1292:    }
        -: 1293:	
      206: 1294:  return 0;
        -: 1295:}
        -: 1296:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1297:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1298:{
        -: 1299:  //Note: supplyPos is enum of choosen card
        -: 1300:	
        -: 1301:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1302:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1303:    {
    #####: 1304:      return -1;
        -: 1305:    }
        -: 1306:	
        -: 1307:  //added card for [whoseTurn] current player:
        -: 1308:  // toFlag = 0 : add to discard
        -: 1309:  // toFlag = 1 : add to deck
        -: 1310:  // toFlag = 2 : add to hand
        -: 1311:
    #####: 1312:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1313:    {
    #####: 1314:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1315:      state->deckCount[player]++;
    #####: 1316:    }
    #####: 1317:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1318:    {
    #####: 1319:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1320:      state->handCount[player]++;
    #####: 1321:    }
        -: 1322:  else
        -: 1323:    {
    #####: 1324:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1325:      state->discardCount[player]++;
        -: 1326:    }
        -: 1327:	
        -: 1328:  //decrease number in supply pile
    #####: 1329:  state->supplyCount[supplyPos]--;
        -: 1330:	 
    #####: 1331:  return 0;
    #####: 1332:}
        -: 1333:
function updateCoins called 13 returned 100% blocks executed 85%
        -: 1334:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1335:{
        -: 1336:  int i;
        -: 1337:	
        -: 1338:  //reset coin count
       13: 1339:  state->coins = 0;
        -: 1340:
        -: 1341:  //add coins for each Treasure card in player's hand
      156: 1342:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1343:    {
       65: 1344:      if (state->hand[player][i] == copper)
branch  0 taken 80%
branch  1 taken 20%
        -: 1345:	{
       52: 1346:	  state->coins += 1;
       52: 1347:	}
       13: 1348:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1349:	{
    #####: 1350:	  state->coins += 2;
    #####: 1351:	}
       13: 1352:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1353:	{
    #####: 1354:	  state->coins += 3;
    #####: 1355:	}	
       65: 1356:    }	
        -: 1357:
        -: 1358:  //add bonus
       13: 1359:  state->coins += bonus;
        -: 1360:
       13: 1361:  return 0;
        -: 1362:}
        -: 1363:
        -: 1364:
        -: 1365://end of dominion.c
